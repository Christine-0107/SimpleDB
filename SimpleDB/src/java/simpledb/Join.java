package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;

    private final JoinPredicate p;
    private OpIterator child1;
    private OpIterator child2;

    private Tuple t1; //方便后面合并
    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, OpIterator child1, OpIterator child2) {
        // some code goes here
        this.p=p;
        this.child1=child1;
        this.child2=child2;
        t1=null;
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return p;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        // some code goes here
        TupleDesc td1=child1.getTupleDesc();
        String name1=td1.getFieldName(p.getField1());
        return name1;
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        // some code goes here
        TupleDesc td2=child2.getTupleDesc();
        String name2=td2.getFieldName(p.getField2());
        return name2;
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    //调用TupleDesc类中merge方法合并
    public TupleDesc getTupleDesc() {
        // some code goes here
        TupleDesc joinTd=TupleDesc.merge(child1.getTupleDesc(),child2.getTupleDesc());
        return joinTd;
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here
        child1.open();
        child2.open();
        super.open();
    }

    public void close() {
        // some code goes here
        super.close();
        child2.close();
        child1.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
        child1.rewind();
        child2.rewind();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * 左右（1，2）的串联，可能造成重复（12和21）
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */

    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here
        while(child1.hasNext() || t1!=null){ //t1尚不为空，不用动child1
            if(child1.hasNext()&&t1==null) { //t1为空再赋值
                t1 = child1.next();
            }
            while(child2.hasNext()){
                Tuple t2=child2.next();
                if(p.filter(t1,t2)){
                    TupleDesc newTd=TupleDesc.merge(t1.getTupleDesc(),t2.getTupleDesc());
                    Tuple newTuple=new Tuple(newTd);
                    newTuple.setRecordId(t1.getRecordId());
                    int i=0;
                    for(;i<t1.getTupleDesc().numFields();i++){
                        newTuple.setField(i,t1.getField(i));
                    }
                    for(;i<t1.getTupleDesc().numFields()+t2.getTupleDesc().numFields();i++){
                        newTuple.setField(i,t2.getField(i-t1.getTupleDesc().numFields()));
                    }
                    if(!child2.hasNext()){
                        child2.rewind();
                        t1=null;
                    }
                    return newTuple;
                }
            }
            child2.rewind();
            t1=null;
        }

        return null;
    }

    @Override
    public OpIterator[] getChildren() {
        // some code goes here
        return new OpIterator[] {child1,child2};
    }

    @Override
    public void setChildren(OpIterator[] children) {
        // some code goes here
        child1 = children[0];
        child2 = children[1];
    }

}
